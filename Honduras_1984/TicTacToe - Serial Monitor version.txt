/**************************************************************************
  *  
 *  TicTacToe  - Serial monitor version.
 *  Note: the OLED version code  is better described; if you have any
 *        doubt about any instruction, please  take a look to that version.
 *  
 *  It only requires an Arduino (tested  with Nano and Uno, but it 
 *  should work with (almost?) any Arduino and other  clones
 *  
 *  To use it, you need to connect the Arduino to USB and call  the 
 *  Serial monitor from inside Arduino IDE: Menu tools -> serial monitor
  *  (or pressing Ctrl + Shift + M)
 *  
 *  Move using the 1...9 keys (plus  Enter) from inside the Serial Monitor:
 *  
 *   1 | 2 | 3
 *  ---+---+---
  *   4 | 5 | 6
 *  ---+---+---
 *   7 | 8 | 9
 * 
 * Giovanni Verrua,  april 2022
**************************************************************************/


int  gameStatus = 0;
int whosplaying = 0; //0 = Arduino, 1 = Human 

int winner  = -1;  //-1 = Playing, 0 = Draw, 1 = Human, 2 = CPU


int board[]={0,0,0,  
             0,0,0,
             0,0,0}; //0 = blank, 1 = human (circle),  2 = computer (cross)

             



//--------------------------------------------------------------------------------------------------------
void  playhuman() {
     
    int humanMove = -1;     
    bool stayInLoop =  true;
    
    while (stayInLoop) {
                  
         Serial.println(F("\
Make  your move\
"));
    
         while (Serial.available() && Serial.read());  // empty buffer
         while (!Serial.available());                 // wait  for data
  
         if (Serial.available()) {  //data available.
          
             int humanMove = Serial.read() - 48;     //serial.read() return the  ascii value of the pressed key. The "1" ascii value is 49. 
                          
             Serial.println(humanMove);
             
             if (humanMove  >=0 && humanMove <=9) {

                if (board[humanMove-1] !=0) {
                   Serial.println(F("\
Error - Cell already in use"));                
                   stayInLoop = true;
                }
                else  {
                    stayInLoop = false;                
                    board[humanMove-1]  = 1; //remember: the player uses the 1..9 keys, but the array index starts by 0  (9 cells = 0..8)
                }    
             }
             else  {
                Serial.println(F("\
type error (just 1 to 9)"));                
                stayInLoop = true;
             }      
             
         }      
  }

  
 
    
}


//--------------------------------------------------------------------------------------------------------
void  playcpu() {
          
     int cpumove = checkboard(2);  //2 = cpu  let's  check if there's a cpu's winner move

     if (cpumove >=0) {
        board[cpumove]  = 2;    //cpu's winner move
     }
     else {    
         cpumove = checkboard(1);  //1=player check if the player has a chance to win (2 circles and an empty cell  in a row)   
         if (cpumove >=0) {  
            board[cpumove] = 2;  //this move will break the player's winner move
         }     
    
        //there's no possible winner move neither for the cpu, nor for the human,  I will put an "X" in a random cell
        while (cpumove < 0) {                
           int randomMove = random(10);
           if (randomMove >=0 && randomMove  <=8 && board[randomMove] == 0) {
               cpumove = randomMove;
           }        
        }        
        board[cpumove] = 2;
     } 
}


//--------------------------------------------------------------------------------------------------------
int  checkboard(int x){   //x = 1 -> player, x = 2 -> cpu

//full case
  
       if (board[0]==0 && board[1]==x && board[2]==x)  return  0;  //  0 1 1 
                                                                   //  . . .
                                                                   //  . . .
                                                                   
  else if  (board[0]==x && board[1]==0 && board[2]==x)  return  1;  //  1 0 1 
                                                                   //  . . .
                                                                   //  . . .
                                                                   
  else if (board[0]==x && board[1]==x && board[2]==0)  return  2;  //  1 1 0
                                                                   //  . . .
                                                                   //  . . .                                                                   
  //-------------------------------------------------
  else if (board[3]==0  && board[4]==x && board[5]==x)  return  3;  //  . . .
                                                                   //  0 1 1
                                                                   //  . . .
                                                                     
  else if (board[3]==x && board[4]==0 && board[5]==x)  return  4;  //  . . .  
                                                                   //  1 0 1
                                                                   //  . . .                                                                 

  else if (board[3]==x && board[4]==x && board[5]==0)  return  5;  //  . . .
                                                                   //  1 1 0
                                                                   //  . . .
    //-------------------------------------------------
  else if (board[6]==0  && board[7]==x && board[8]==x)  return  6;  //  . . .
                                                                   //  . . .
                                                                   //  0 1 1
                                                                     
  else if (board[6]==x && board[7]==0 && board[8]==x)  return  7;  //  . . .  
                                                                   //  . . .
                                                                   //  1 0 1

  else if (board[6]==x && board[7]==x && board[8]==0)  return  8;  //  . . .
                                                                   //  . . .
                                                                   //  1 1 0

  //-------------------------------------------------
  else if (board[0]==0  && board[3]==x && board[6]==x)  return  0;  //  0 . .
                                                                   //  1 . .
                                                                   //  1 . .
  
  else if (board[0]==x && board[3]==0 && board[6]==x)  return  3;  //  1 . .
                                                                   //  0 . .
                                                                   //  1 . .
  
  else if (board[0]==x && board[3]==x && board[6]==0)  return  6;  //  1 . .
                                                                   //  1 . .
                                                                   //  0 . .  
                                                                   
  //-------------------------------------------------
  else if (board[1]==0  && board[4]==x && board[7]==x)  return  1;  //  . 0 .
                                                                   //  . 1 .
                                                                   //  . 1 .
  
  else if (board[1]==x && board[4]==0 && board[7]==x)  return  4;  //  . 1 .
                                                                   //  . 0 .
                                                                   //  . 1 .  
  
  else if (board[1]==x && board[4]==x && board[7]==0)  return  7;  //  . 1 .
                                                                   //  . 1 .
                                                                   //  . 0 .  
                                                                    
  //-------------------------------------------------
  else if (board[2]==0  && board[5]==x && board[8]==x)  return  2;  //  . . 0 
                                                                   //  . . 1 
                                                                   //  . . 1 
  
  else if (board[2]==x && board[5]==0 && board[8]==x)  return  5;  //  . . 1 
                                                                   //  . . 0 
                                                                   //  . . 1   
  
  else if (board[2]==x && board[5]==x && board[8]==0)  return  8;  //  . . 1 
                                                                   //  . . 1
                                                                   //  . . 0
                                                                    
  //-------------------------------------------------
  else if (board[0]==0  && board[4]==x && board[8]==x)  return  0;  //  0 . . 
                                                                   //  . 1 . 
                                                                   //  . . 1 
  
  else if (board[0]==x && board[4]==0 && board[8]==x)  return  4;  //  1 . . 
                                                                   //  . 0 .
                                                                   //  . . 1   
  
  else if (board[0]==x && board[4]==x && board[8]==0)  return  8;  //  1 . . 
                                                                   //  . 1 .
                                                                   //  . . 0

  //-------------------------------------------------
  else if  (board[2]==0 && board[4]==x && board[6]==x)  return  2;  //  . . 0 
                                                                   //  . 1 . 
                                                                   //  1 . . 

  else if (board[2]==x && board[4]==0 && board[6]==x)  return  4;  //  . . 1 
                                                                   //  . 0 . 
                                                                   //  1 . . 
    
  else if (board[2]==x && board[4]==x && board[6]==0)  return  6;  //  . . 1 
                                                                   //  . 1 . 
                                                                   //  0 . . 
  
  else                                                 return  -1;
}


//--------------------------------------------------------------------------------------------


void  checkWinner() {    //check the board to see if there is a winner

  winner  = 3;  //3=draft, 1= winner->player, 2=winner->cpu
    
  // circles win?
       if (board[0]==1 && board[1]==1 && board[2]==1)     winner=1;   
  else  if (board[3]==1 && board[4]==1 && board[5]==1)     winner=1;   
  else if (board[6]==1  && board[7]==1 && board[8]==1)     winner=1;     
  else if (board[0]==1 && board[3]==1  && board[6]==1)     winner=1;   
  else if (board[1]==1 && board[4]==1 && board[7]==1)     winner=1;   
  else if (board[2]==1 && board[5]==1 && board[8]==1)     winner=1;     
  else if (board[0]==1 && board[4]==1 && board[8]==1)     winner=1;   
  else if (board[2]==1 && board[4]==1 && board[6]==1)     winner=1; 
    
  // crosses win?
  else if (board[0]==2 && board[1]==2 && board[2]==2)     winner=2;   
  else if (board[3]==2 && board[4]==2 && board[5]==2)     winner=2;   
  else if (board[6]==2 && board[7]==2 && board[8]==2)     winner=2;     
  else  if (board[0]==2 && board[3]==2 && board[6]==2)     winner=2;   
  else if (board[1]==2  && board[4]==2 && board[7]==2)     winner=2;   
  else if (board[2]==2 && board[5]==2  && board[8]==2)     winner=2;     
  else if (board[0]==2 && board[4]==2 && board[8]==2)     winner=2;   
  else if (board[2]==2 && board[4]==2 && board[6]==2)     winner=2;   

  if (winner == 3) {      
     for(int i=0;i<9;i++) if (board[i]==0)  winner=0;  //there are some empty cell yet. 
  }   
     
 
}

//--------------------------------------------------------------------------------------------------------------

void  resetGame() {
  Serial.println("Resetting game...");
  for(int i=0;i<9;i++)  board[i]=0; 
  winner = 0;
  gameStatus = 0; 
  
}

//--------------------------------------------------------------------------------------------------------------

void  boardDrawing() {
  
  Serial.println("");
  Serial.print(F("  "));  Serial.print(charBoard(0)); Serial.print(F(" | ")); Serial.print(charBoard(1));  Serial.print(F(" | "));  Serial.println(charBoard(2)); 
  Serial.println(F("  ---+---+---")); 
  Serial.print(F("  ")); Serial.print(charBoard(3)); Serial.print(F("  | ")); Serial.print(charBoard(4)); Serial.print(F(" | "));  Serial.println(charBoard(5));  
  Serial.println(F(" ---+---+---")); 
  Serial.print(F("  ")); Serial.print(charBoard(6));  Serial.print(F(" | ")); Serial.print(charBoard(7)); Serial.print(F(" | "));  Serial.println(charBoard(8)); 
  Serial.println("");
  
}



//--------------------------------------------------------------------------------------------------------------
String  charBoard(int x) {
       if (board[x] == 0) return " ";       
       if  (board[x] == 1) return "o";
       if (board[x] == 2) return "x";  

       return "?";  //error trap; it shouldn't pass here.
}


//--------------------------------------------------------------------------------------------------------------
void  setup() {
  
  Serial.begin(9600);
    
  randomSeed(analogRead(0));  //resetting the random function.

}


//--------------------------------------------------------------------------------------------------------------
void  loop() {

                
  if (gameStatus == 0){     
    Serial.println(F("Let's  begin..."));  
    
    whosplaying = 2;
    while ( whosplaying <0 ||  whosplaying > 1) {
         whosplaying = random(2);  
    }

    gameStatus  = 1;
    winner = 0;
  }

  //---------------------------------------------
  
  if (gameStatus == 1){   //start

      if (whosplaying == 1) boardDrawing();
      
      
      while (winner == 0) {  //game main loop
                       
        if (whosplaying == 0) { 
          Serial.println("CPU turn:");    
          playcpu();  
          whosplaying =1; 
        }
        else  { 
          Serial.println("Player turn:"); 
          playhuman(); 
          whosplaying =0; 
        }

        boardDrawing();
        checkWinner();  //this will assign the winner variable

         if (winner > 0) {
            Serial.println("");
            if (winner == 3) Serial.print(F("Draft!"));
            else {
                Serial.print(F("The winner is "));
                if (winner  == 1) Serial.println(F("the human")); else Serial.println(F("the CPU")); 
            }               
                     
         }
        
      }
      resetGame();      
      Serial.println("");
      delay(2000);
      Serial.println("");
  }
  
}


 
